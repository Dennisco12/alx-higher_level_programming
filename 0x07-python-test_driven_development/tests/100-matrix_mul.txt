This file tests the content of 100-matrix_mul for errors

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

It works for normal matrices
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, 2], [3, 4]]
>>> print(matrix_mul(m_a, m_b))
[[7, 10], [15, 22]]

>>print(matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
[[13, 16]]

doesn't work if either m_a and m_b are not lists
>>> print(matrix_mul(4, [2, 4, 6]))
Traceback (most recent call last):
TypeError: m_a must be a list

Doesn't work if either m_a or m_b are not list of lists
>>> print(matrix_mul([2, 4, 6], [[2, 4, 6], [2, 4, 6]]))
Traceback (most recent call last):
TypeError: m_a must be a list of lists

Doesn't work if either m_a or m_b is an empty list
>>> print(matrix_mul([[2, 4, 6], [2, 4, 6]], []))
Traceback (most recent call last):
ValueError: m_b can't be empty

Doesn't work if either m_a or m_b doesn't contain int or float types
>>> print(matrix_mul([["c", "python"], ["school", "Dennis"]], [[2, 4, 6], [2, 4, 6]]))
Traceback (most recent call last):
TypeError: m_a should contain only integers or floats

Doesn't work if either of the matrix doesn't have equal rows
>>> print(matrix_mul([[2, 4, 6], [2, 4, 6]], [[2, 4], [2, 4, 6]]))
Traceback (most recent call last):
TypeError: each row of m_b must be of the same size

Doesn't work if the two matrices can't be multiplied
>>> print(matrix_mul([[2, 4],[2, 4]], [[2, 4, 6], [2, 4, 6], [2, 4, 6]]))
Traceback (most recent call last):
ValueError: m_a and m_b can't be multiplied
